
=============================
Tests for 2-matrix_divided.py
=============================

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Valid simple matrix
===================

	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	...	]

::

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

::

	>>> matrix_divided(matrix, -5)
	[[-0.2, -0.4, -0.6], [-0.8, -1.0, -1.2]]

::

	>>> matrix
	[[1, 2, 3], [4, 5, 6]]

Function returns new matrix, original matrix is expected

Expected div errors
-------------------

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

::

	>>> matrix_divided(matrix, "Hello")
	Traceback (most recent call last):
	...
	TypeError: div must be a number


Valid complex matrix
====================

	>>> matrix = [
	... [24, 378, 298, 0, 0, 4],
	... [123456, float('inf'), 2, 69, 42, 303]
	... ]

	>>> matrix_divided(matrix, 24)
	[[1.0, 15.75, 12.42, 0.0, 0.0, 0.17], [5144.0, inf, 0.08, 2.88, 1.75, 12.62]]
	>>> matrix
	[[24, 378, 298, 0, 0, 4], [123456, inf, 2, 69, 42, 303]]

::

infinite float

	>>> matrix_divided([[float('inf')]], 3)
	[[inf]]

::

NaN float

	>>> matrix_divided([[float('NaN')]], 3)
	[[nan]]



Invalid matrix
==============

matrix with non-number element

	>>> matrix_divided([["hello", 2, 3], [4, 5, 6]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

matrix with unequal rows

	>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size
